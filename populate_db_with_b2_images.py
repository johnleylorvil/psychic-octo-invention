#!/usr/bin/env python3
"""
populate_db_with_b2_images.py
Database population script for Af√®panou marketplace using B2 bucket images
"""

import os
import sys
import json
import random
from decimal import Decimal
from django.db import transaction
from django.utils import timezone
from django.utils.text import slugify

# Add the project directory to Python path
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(BASE_DIR)

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
import django
django.setup()

from marketplace.models import (
    User, Category, Product, ProductImage, Banner, 
    VendorProfile, Review, Page, MediaContentSection
)

# B2 Bucket Configuration
B2_BUCKET_NAME = "afepanou"
B2_ENDPOINT_URL = "https://s3.us-east-005.backblazeb2.com"
B2_BASE_URL = f"{B2_ENDPOINT_URL}/{B2_BUCKET_NAME}"

class DatabasePopulator:
    def __init__(self):
        self.images_data = self.load_images_data()
        self.categories_map = {}
        self.products_created = 0
        self.banners_created = 0
        
    def load_images_data(self):
        """Load images data from JSON file"""
        try:
            with open('images_list.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ùå Error: images_list.json not found. Please run analyze_b2_bucket.py first.")
            sys.exit(1)
            
    def get_image_url(self, file_path):
        """Generate full B2 URL for image"""
        return f"{B2_BASE_URL}/{file_path}"
    
    def create_categories(self):
        """Create product categories based on B2 folder structure"""
        print("üìÇ Creating categories...")
        
        categories_data = {
            "premiere-necessite": {
                "name": "Produits de Premi√®re N√©cessit√©",
                "description": "Produits essentiels pour la vie quotidienne en Ha√Øti",
                "icon": "üõí",
                "is_featured": True,
                "sort_order": 1
            },
            "locaux": {
                "name": "Produits Locaux",
                "description": "Produits fabriqu√©s localement en Ha√Øti",
                "icon": "üè∫",
                "is_featured": True,
                "sort_order": 2
            },
            "patriotiques": {
                "name": "Produits Patriotiques et Artisanaux",
                "description": "Artisanat ha√Øtien et produits patriotiques",
                "icon": "üá≠üáπ",
                "is_featured": True,
                "sort_order": 3
            },
            "electroniques": {
                "name": "Produits √âlectroniques",
                "description": "Appareils √©lectroniques et accessoires",
                "icon": "üì±",
                "is_featured": True,
                "sort_order": 4
            },
            "services": {
                "name": "Services Divers",
                "description": "Services professionnels et personnels",
                "icon": "üîß",
                "is_featured": True,
                "sort_order": 5
            },
            "agricole": {
                "name": "Produits Agricoles",
                "description": "Fruits, l√©gumes et produits agricoles locaux",
                "icon": "üåæ",
                "parent": "locaux",
                "sort_order": 6
            },
            "artisanat": {
                "name": "Artisanat",
                "description": "Objets d'art et artisanat traditionnel",
                "icon": "üé®",
                "parent": "patriotiques",
                "sort_order": 7
            }
        }
        
        # Create parent categories first
        for slug, data in categories_data.items():
            if 'parent' not in data:
                category, created = Category.objects.get_or_create(
                    slug=slug,
                    defaults={
                        'name': data['name'],
                        'description': data['description'],
                        'is_featured': data.get('is_featured', False),
                        'sort_order': data['sort_order'],
                        'is_active': True
                    }
                )
                self.categories_map[slug] = category
                if created:
                    print(f"  ‚úÖ Created category: {category.name}")
        
        # Create subcategories
        for slug, data in categories_data.items():
            if 'parent' in data:
                parent_category = self.categories_map.get(data['parent'])
                category, created = Category.objects.get_or_create(
                    slug=slug,
                    defaults={
                        'name': data['name'],
                        'description': data['description'],
                        'parent': parent_category,
                        'sort_order': data['sort_order'],
                        'is_active': True
                    }
                )
                self.categories_map[slug] = category
                if created:
                    print(f"  ‚úÖ Created subcategory: {category.name}")
    
    def create_users_and_vendors(self):
        """Create test users and vendor profiles"""
        print("üë• Creating users and vendors...")
        
        vendors_data = [
            {
                "username": "marie_artisan",
                "email": "marie@afepanou.com",
                "first_name": "Marie",
                "last_name": "Dupont",
                "business_name": "Artisanat Marie",
                "business_type": "individual",
                "business_description": "Artisanat traditionnel ha√Øtien fait main",
                "categories": ["patriotiques", "artisanat"]
            },
            {
                "username": "jean_agriculteur",
                "email": "jean@afepanou.com", 
                "first_name": "Jean",
                "last_name": "Pierre",
                "business_name": "Ferme Jean Pierre",
                "business_type": "individual",
                "business_description": "Producteur local de fruits et l√©gumes",
                "categories": ["locaux", "agricole"]
            },
            {
                "username": "tech_haiti",
                "email": "contact@techhaiti.com",
                "first_name": "Paul",
                "last_name": "Mo√Øse",
                "business_name": "Tech Haiti Store",
                "business_type": "corporation",
                "business_description": "Vente d'appareils √©lectroniques",
                "categories": ["electroniques"]
            },
            {
                "username": "services_pro",
                "email": "info@servicespro.ht",
                "first_name": "Claire",
                "last_name": "Joseph",
                "business_name": "Services Professionnels",
                "business_type": "sole_proprietorship", 
                "business_description": "Services divers pour particuliers et entreprises",
                "categories": ["services"]
            },
            {
                "username": "epicerie_locale",
                "email": "contact@epicerielocale.ht",
                "first_name": "Robert",
                "last_name": "Charles",
                "business_name": "√âpicerie Locale",
                "business_type": "individual",
                "business_description": "Produits de premi√®re n√©cessit√©",
                "categories": ["premiere-necessite"]
            }
        ]
        
        for vendor_data in vendors_data:
            # Create user
            user, created = User.objects.get_or_create(
                username=vendor_data["username"],
                defaults={
                    "email": vendor_data["email"],
                    "first_name": vendor_data["first_name"],
                    "last_name": vendor_data["last_name"],
                    "is_seller": True,
                    "seller_since": timezone.now(),
                    "phone": f"+509 {random.randint(1000, 9999)}-{random.randint(1000, 9999)}",
                    "city": "Port-au-Prince",
                    "country": "Ha√Øti"
                }
            )
            
            if created:
                user.set_password("afepanoutest123")
                user.save()
                print(f"  ‚úÖ Created user: {user.username}")
                
                # Create vendor profile
                vendor_profile, vp_created = VendorProfile.objects.get_or_create(
                    user=user,
                    defaults={
                        "business_name": vendor_data["business_name"],
                        "business_type": vendor_data["business_type"],
                        "business_description": vendor_data["business_description"],
                        "business_address": f"{random.randint(10, 999)} Rue de la Paix, Port-au-Prince",
                        "business_phone": f"+509 {random.randint(1000, 9999)}-{random.randint(1000, 9999)}",
                        "business_email": vendor_data["email"],
                        "is_verified": True,
                        "verification_status": "verified",
                        "verified_at": timezone.now()
                    }
                )
                
                if vp_created:
                    print(f"  ‚úÖ Created vendor profile: {vendor_profile.business_name}")
    
    def create_products_from_images(self):
        """Create products using B2 bucket images"""
        print("üõçÔ∏è Creating products from B2 images...")
        
        # Product templates by category
        product_templates = {
            "premiere-necessite": [
                {"name": "Caf√© Ha√Øtien Premium", "base_price": 250, "description": "Caf√© 100% ha√Øtien cultiv√© dans nos montagnes"},
                {"name": "Riz Local", "base_price": 180, "description": "Riz de qualit√© sup√©rieure produit localement"},
                {"name": "Haricots Noirs", "base_price": 120, "description": "Haricots noirs riches en prot√©ines"},
                {"name": "Huile V√©g√©tale", "base_price": 350, "description": "Huile de cuisson de premi√®re qualit√©"},
                {"name": "Conserves de Poisson", "base_price": 95, "description": "Poisson en conserve, source de prot√©ines"},
                {"name": "Dentifrice", "base_price": 45, "description": "Hygi√®ne dentaire quotidienne"},
                {"name": "Sauce Tomate", "base_price": 35, "description": "Sauce tomate concentr√©e pour vos plats"},
                {"name": "Lentilles", "base_price": 140, "description": "Lentilles s√©ch√©es riches en fibres"},
                {"name": "Farine de Ma√Øs", "base_price": 85, "description": "Farine de ma√Øs pour pr√©parations locales"}
            ],
            "locaux": [
                {"name": "Bol en C√©ramique Artisanal", "base_price": 450, "description": "Bol en c√©ramique fait main par nos artisans"},
                {"name": "Chapeau de Paille Traditionnel", "base_price": 320, "description": "Chapeau de paille tress√©e √† la main"},
                {"name": "Chemise Traditionnelle", "base_price": 680, "description": "Chemise traditionnelle ha√Øtienne"},
                {"name": "Collier en Graines", "base_price": 180, "description": "Bijoux artisanaux en graines locales"},
                {"name": "Huile de Palma Christi", "base_price": 220, "description": "Huile naturelle aux vertus th√©rapeutiques"},
                {"name": "Savon au Moringa", "base_price": 65, "description": "Savon naturel enrichi au moringa"},
                {"name": "Valise en Paille", "base_price": 890, "description": "Valise artisanale en paille tress√©e"},
                {"name": "Vase en C√©ramique", "base_price": 520, "description": "Vase d√©coratif en c√©ramique peinte"}
            ],
            "patriotiques": [
                {"name": "Sculpture en Bois Ha√Øtienne", "base_price": 850, "description": "Sculpture artisanale repr√©sentant la culture ha√Øtienne"},
                {"name": "Bijoux aux Couleurs d'Ha√Øti", "base_price": 380, "description": "Bijoux artisanaux aux couleurs du drapeau"},
                {"name": "Bracelet Ha√Øti", "base_price": 280, "description": "Bracelet patriotique fait main"},
                {"name": "Drapeau de Table", "base_price": 150, "description": "Petit drapeau ha√Øtien pour d√©coration"},
                {"name": "T-Shirt 'Fier d'√™tre Ha√Øtien'", "base_price": 420, "description": "T-shirt patriotique de qualit√©"},
                {"name": "Grand Drapeau Ha√Øti", "base_price": 680, "description": "Grand drapeau ha√Øtien officiel"},
                {"name": "Portrait H√©ros de l'Ind√©pendance", "base_price": 950, "description": "Tableau des h√©ros de l'ind√©pendance"},
                {"name": "Pendentif Ha√Øti", "base_price": 190, "description": "Pendentif carte d'Ha√Øti"},
                {"name": "Pin Drapeau Ha√Øti", "base_price": 45, "description": "Pin's drapeau ha√Øtien"},
                {"name": "Tableau Artistique", "base_price": 1200, "description": "≈íuvre d'art originale ha√Øtienne"}
            ],
            "electroniques": [
                {"name": "Coque iPhone Protection", "base_price": 280, "description": "Coque de protection pour iPhone"},
                {"name": "Casque Audio Premium", "base_price": 1250, "description": "Casque audio haute qualit√©"},
                {"name": "iPhone 14", "base_price": 45000, "description": "iPhone 14 derni√®re g√©n√©ration"},
                {"name": "iPhone 15", "base_price": 52000, "description": "iPhone 15 avec technologie avanc√©e"},
                {"name": "Samsung Galaxy", "base_price": 38000, "description": "Smartphone Samsung derni√®re g√©n√©ration"},
                {"name": "Coque Samsung Silicone", "base_price": 220, "description": "Coque en silicone pour Samsung"},
                {"name": "Smart TV", "base_price": 28000, "description": "T√©l√©vision intelligente HD"}
            ],
            "services": [
                {"name": "Service Comptabilit√©", "base_price": 2500, "description": "Services comptables professionnels"},
                {"name": "Aide D√©marches Administratives", "base_price": 800, "description": "Assistance pour d√©marches l√©gales"},
                {"name": "Cours d'Anglais Priv√©s", "base_price": 1200, "description": "Cours particuliers d'anglais"},
                {"name": "Formation Informatique", "base_price": 3500, "description": "Formation en bureautique et informatique"},
                {"name": "Cours Particuliers Math√©matiques", "base_price": 1500, "description": "Soutien scolaire en math√©matiques"},
                {"name": "Service Livraison Colis", "base_price": 150, "description": "Livraison rapide dans Port-au-Prince"},
                {"name": "Nettoyage R√©sidentiel", "base_price": 1800, "description": "Service de nettoyage √† domicile"},
                {"name": "Nettoyage Appartement", "base_price": 2200, "description": "Nettoyage complet d'appartement"},
                {"name": "R√©paration √âcran T√©l√©phone", "base_price": 1250, "description": "R√©paration d'√©crans de smartphones"}
            ]
        }
        
        # Get vendors for each category
        vendors = list(User.objects.filter(is_seller=True))
        
        for image_data in self.images_data:
            file_path = image_data["file_name"]
            
            # Skip non-product images
            if any(skip in file_path for skip in ["Logo.png", "banners/", "featured/", "bestproduct/", "payments/", ".jpg"]):
                continue
            
            # Determine category from file path
            category_slug = None
            template_category = None
            
            if "Premi√®re N√©cessit√©" in file_path:
                category_slug = "premiere-necessite"
                template_category = "premiere-necessite"
            elif "Produits Locaux" in file_path:
                category_slug = "locaux"
                template_category = "locaux"
            elif "Patriotiques et Artisanaux" in file_path:
                category_slug = "patriotiques"
                template_category = "patriotiques"
            elif "√âlectroniques" in file_path:
                category_slug = "electroniques"
                template_category = "electroniques"
            elif "Services Divers" in file_path:
                category_slug = "services"
                template_category = "services"
            elif "produits/locaux/agricole" in file_path:
                category_slug = "agricole"
                template_category = "locaux"
            elif "produits/locaux/artisanat" in file_path or "produits/patriotiques" in file_path:
                category_slug = "artisanat"
                template_category = "patriotiques"
            
            if not category_slug or category_slug not in self.categories_map:
                continue
                
            # Get random product template
            if template_category and template_category in product_templates:
                templates = product_templates[template_category]
                if templates:
                    template = random.choice(templates)
                    product_templates[template_category].remove(template)  # Don't reuse
                else:
                    continue
            else:
                continue
            
            # Create product
            category = self.categories_map[category_slug]
            vendor = random.choice(vendors)
            
            # Generate product name based on image filename if template is exhausted
            base_name = template["name"]
            filename = os.path.splitext(os.path.basename(file_path))[0]
            
            product, created = Product.objects.get_or_create(
                name=base_name,
                seller=vendor,
                defaults={
                    "category": category,
                    "short_description": template["description"],
                    "description": f"{template['description']}. Produit de qualit√© disponible sur Af√®panou.",
                    "price": Decimal(str(template["base_price"])),
                    "promotional_price": Decimal(str(template["base_price"] * 0.85)) if random.choice([True, False]) else None,
                    "stock_quantity": random.randint(5, 50),
                    "is_active": True,
                    "is_featured": random.choice([True, False, False, False]),  # 25% chance
                    "weight": Decimal(str(random.uniform(0.1, 5.0))),
                    "brand": "Ha√Øti Local" if "locaux" in category_slug else "Af√®panou",
                    "origin_country": "Ha√Øti",
                    "condition_type": "new"
                }
            )
            
            if created:
                # Create product image
                ProductImage.objects.create(
                    product=product,
                    image_url=self.get_image_url(file_path),
                    image_path=file_path,
                    alt_text=f"Image de {product.name}",
                    title=product.name,
                    is_primary=True,
                    sort_order=0
                )
                
                self.products_created += 1
                print(f"  ‚úÖ Created product: {product.name} ({category.name})")
                
                # Add some reviews randomly
                if random.choice([True, False]):
                    self.create_product_reviews(product)
    
    def create_product_reviews(self, product):
        """Create random reviews for a product"""
        review_texts = [
            "Excellent produit, tr√®s satisfait de mon achat!",
            "Qualit√© au rendez-vous, je recommande vivement.",
            "Produit conforme √† la description, livraison rapide.",
            "Tr√®s bon rapport qualit√©-prix, je rach√®terai.",
            "Service client excellent, produit de qualit√©.",
            "Exactement ce que je cherchais, parfait!",
            "Produit authentique, tr√®s content de mon achat."
        ]
        
        # Create 1-3 reviews per product
        num_reviews = random.randint(1, 3)
        regular_users = User.objects.filter(is_seller=False)
        
        if not regular_users.exists():
            # Create some regular users for reviews
            for i in range(5):
                user = User.objects.create(
                    username=f"client_{i+1}",
                    email=f"client{i+1}@example.com",
                    first_name=f"Client{i+1}",
                    last_name="Test"
                )
                user.set_password("testpass123")
                user.save()
        
        regular_users = User.objects.filter(is_seller=False)
        
        for _ in range(num_reviews):
            Review.objects.create(
                product=product,
                user=random.choice(regular_users),
                rating=random.choice([4, 5, 5, 5]),  # Mostly good reviews
                comment=random.choice(review_texts),
                is_approved=True
            )
    
    def create_banners(self):
        """Create banners using B2 images"""
        print("üé® Creating banners...")
        
        banner_images = [
            img for img in self.images_data 
            if "banners/" in img["file_name"] or img["file_name"] in [
                "fresh-food-banner.jpg", "grocery-marketplace-hero.jpg", 
                "local-artisan-hero.png", "patriotic-marketplace-hero.png",
                "professional-services-hero.jpg", "tech-gadgets-banner.png"
            ]
        ]
        
        banner_data = [
            {
                "title": "Produits Agricoles Frais",
                "subtitle": "Mangues, avocats et produits locaux",
                "description": "D√©couvrez nos produits agricoles frais directement des producteurs ha√Øtiens",
                "button_text": "Voir les produits",
                "link_url": "/categories/agricole/",
                "layout_type": "hero"
            },
            {
                "title": "F√™te du Drapeau 2025",
                "subtitle": "C√©l√©brons ensemble notre patrimoine",
                "description": "Collection sp√©ciale produits patriotiques pour la f√™te du drapeau",
                "button_text": "Collection patriotique", 
                "link_url": "/categories/patriotiques/",
                "layout_type": "carousel"
            },
            {
                "title": "Formation Informatique",
                "subtitle": "D√©veloppez vos comp√©tences num√©riques",
                "description": "Cours d'informatique et bureautique avec des professionnels qualifi√©s",
                "button_text": "S'inscrire",
                "link_url": "/categories/services/",
                "layout_type": "sidebar"
            }
        ]
        
        for i, banner_info in enumerate(banner_data):
            if i < len(banner_images):
                image_data = banner_images[i]
                
                Banner.objects.create(
                    title=banner_info["title"],
                    subtitle=banner_info["subtitle"],
                    description=banner_info["description"],
                    image_url=self.get_image_url(image_data["file_name"]),
                    image_path=image_data["file_name"],
                    link_url=banner_info["link_url"],
                    button_text=banner_info["button_text"],
                    layout_type=banner_info["layout_type"],
                    is_active=True,
                    sort_order=i,
                    view_count=random.randint(100, 1000),
                    click_count=random.randint(10, 100)
                )
                
                self.banners_created += 1
                print(f"  ‚úÖ Created banner: {banner_info['title']}")
    
    def create_content_pages(self):
        """Create static content pages"""
        print("üìÑ Creating content pages...")
        
        pages_data = [
            {
                "title": "√Ä propos d'Af√®panou",
                "slug": "a-propos",
                "content": """
                <h2>Bienvenue sur Af√®panou</h2>
                <p>Af√®panou est la premi√®re plateforme e-commerce d√©di√©e aux produits et services ha√Øtiens. 
                Notre mission est de connecter les producteurs locaux avec les consommateurs, 
                en valorisant le savoir-faire et l'authenticit√© de nos artisans.</p>
                
                <h3>Notre Vision</h3>
                <p>Cr√©er un √©cosyst√®me num√©rique qui soutient l'√©conomie ha√Øtienne en offrant 
                une vitrine moderne et s√©curis√©e pour nos entrepreneurs locaux.</p>
                """,
                "is_featured": True
            },
            {
                "title": "Politique de Confidentialit√©",
                "slug": "politique-confidentialite",
                "content": """
                <h2>Politique de Confidentialit√©</h2>
                <p>Chez Af√®panou, nous prenons la protection de vos donn√©es personnelles tr√®s au s√©rieux...</p>
                """,
                "is_active": True
            },
            {
                "title": "Conditions d'Utilisation",
                "slug": "conditions-utilisation", 
                "content": """
                <h2>Conditions d'Utilisation</h2>
                <p>En utilisant la plateforme Af√®panou, vous acceptez les conditions suivantes...</p>
                """,
                "is_active": True
            }
        ]
        
        admin_user = User.objects.filter(is_superuser=True).first()
        if not admin_user:
            admin_user = User.objects.filter(is_staff=True).first()
        
        for page_data in pages_data:
            Page.objects.get_or_create(
                slug=page_data["slug"],
                defaults={
                    "title": page_data["title"],
                    "content": page_data["content"],
                    "is_active": page_data.get("is_active", True),
                    "is_featured": page_data.get("is_featured", False),
                    "author": admin_user
                }
            )
            print(f"  ‚úÖ Created page: {page_data['title']}")
    
    @transaction.atomic
    def populate(self):
        """Main population method"""
        print("üöÄ Starting database population with B2 images...\n")
        
        # Create categories
        self.create_categories()
        
        # Create users and vendors
        self.create_users_and_vendors()
        
        # Create products from images
        self.create_products_from_images()
        
        # Create banners
        self.create_banners()
        
        # Create content pages
        self.create_content_pages()
        
        print(f"\n‚úÖ Database population completed!")
        print(f"üìä Summary:")
        print(f"   ‚Ä¢ Categories: {len(self.categories_map)}")
        print(f"   ‚Ä¢ Vendors: {User.objects.filter(is_seller=True).count()}")
        print(f"   ‚Ä¢ Products: {self.products_created}")
        print(f"   ‚Ä¢ Banners: {self.banners_created}")
        print(f"   ‚Ä¢ Reviews: {Review.objects.count()}")
        print(f"   ‚Ä¢ Pages: {Page.objects.count()}")

if __name__ == "__main__":
    populator = DatabasePopulator()
    
    # Check if images data exists
    if not populator.images_data:
        print("‚ùå No images data found. Please run analyze_b2_bucket.py first.")
        sys.exit(1)
    
    print(f"üìä Found {len(populator.images_data)} images in B2 bucket")
    
    # Confirm before proceeding
    response = input("\n‚ö†Ô∏è  This will populate the database with test data. Continue? (y/N): ")
    if response.lower() != 'y':
        print("Operation cancelled.")
        sys.exit(0)
    
    # Run population
    try:
        populator.populate()
        print("\nüéâ Database successfully populated with B2 images!")
    except Exception as e:
        print(f"\n‚ùå Error during population: {e}")
        raise